# 5695928648:AAFhb5HB8clzMQ2wFSb3dEvpdufIfH3Yg2Q - –£—á–∏—Ç–µ–ª—å
import telebot 
import json
from telebot import types
import random
import config
def main():
    while True:
        if True:
            bot = telebot.TeleBot('5695928648:AAFhb5HB8clzMQ2wFSb3dEvpdufIfH3Yg2Q')
            @bot.message_handler(commands=["start"])
            def start(message, res=False):
                idtg = str(message.from_user.id)
                with open('uchitel.json', 'r') as file:
                    data = json.load(file)
                idtg = str(message.from_user.id)
                if message.text == "/start" or message.text == "/menu":
                    if idtg not in data:
                        bot.send_message(message.chat.id, f'''
<i><b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b></i>
<b>–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ–¥ —É—á–∏—Ç–µ–ª—è:</b>
                    ''', parse_mode='HTML')
                        bot.register_next_step_handler(message, regis)
                    else:
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width = 1)
                        btn1 = types.KeyboardButton(text="–ö–≤–∞–Ω—Ç—É–º—ãüë©‚Äçüè´")
                        markup.add(btn1)
                        bot.send_message(message.chat.id, config.menu_uchitel(idtg), parse_mode='HTML', reply_markup=markup)
            def regis(message):
                with open('logins.json', 'r') as file:
                    logins = json.load(file)
                idtg = str(message.from_user.id)
                e = 2
                if message.text in logins["uchitel"]:
                    e = 1  
                    
                if e != 1:
                    bot.send_message(message.chat.id, f'''
<i><b>–û–®–ò–ë–ö–ê!</b></i>
<b>–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ–¥ —É—á–∏—Ç–µ–ª—è:</b>
                    ''', parse_mode='HTML')
                    bot.register_next_step_handler(message, regis)

                if e == 1:
                    with open('uchitel.json', 'r') as file:
                        data = json.load(file)
                    name = str(message.chat.first_name)
                    idtg = str(message.from_user.id)
                    rbr = {"fio": logins["uchitel"][str(message.text)]["fio"], "kvan": [], "dop" : {"name": message.from_user.username}}
                    data[idtg] = rbr
                    with open('uchitel.json', 'w') as file:
                        json.dump(data, file, indent=4)
                    with open('uchitel.json', 'r') as file:
                        data = json.load(file)
                    markup = types.InlineKeyboardMarkup(row_width = 1)
                    btn1 = types.InlineKeyboardButton(text="–í –º–µ–Ω—éüìÖ", callback_data="menu")
                    markup.add(btn1)
                    bot.send_message(message.chat.id, f'''
    <b>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!</b>
<i>{data[idtg]["fio"]} –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í –º–µ–Ω—éüìÖ" —á—Ç–æ–±—ã –ø—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!</i>
                    ''',  reply_markup=markup, parse_mode='HTML')



            @bot.message_handler(content_types=["text"])
            def menu(message, res=False):
                with open('uchitel.json', 'r') as file:
                    data = json.load(file)
                idtg = str(message.from_user.id)
                with open('kvantorium.json', 'r') as file:
                    kvant = json.load(file)
                if message.text == "–°–æ–∑–¥–∞—Ç—å –∫–≤–∞–Ω—Ç—É–º":
                    markup = types.ReplyKeyboardMarkup(row_width = 1)
                    btn1 = types.KeyboardButton(text="–ù–∞–∑–∞–¥üëàüèª")
                    markup.add(btn1)
                    bot.send_message(message.chat.id, config.dopkvant, parse_mode='HTML', reply_markup=markup)
                    bot.register_next_step_handler(message, dop)
                if message.text == "–í –º–µ–Ω—éüìÖ":
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width = 1)
                    btn1 = types.KeyboardButton(text="–ö–≤–∞–Ω—Ç—É–º—ãüë©‚Äçüè´")
                    markup.add(btn1)
                    bot.send_message(message.chat.id, config.menu_uchitel(idtg), parse_mode='HTML', reply_markup=markup)
                if message.text == "–ö–≤–∞–Ω—Ç—É–º—ãüë©‚Äçüè´" or message.text == "–ö –∫–≤–∞–Ω—Ç—É–º–∞–ºüë©‚Äçüè´":
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width = 1)
                    for i in data[idtg]["kvan"]:
                        try:
                            btn1 = types.KeyboardButton(i)
                            markup.add(btn1)
                        except:
                            pass
                    btn4 = types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å –∫–≤–∞–Ω—Ç—É–º')
                    markup.add(btn4)
                    btn5 = types.KeyboardButton('–í –º–µ–Ω—éüìÖ')
                    markup.add(btn5)
                    bot.send_message(message.chat.id, config.uchitel_kvant, parse_mode='HTML', reply_markup=markup)
                if message.text in data[idtg]["kvan"] or message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—èüëàüèª":
                    if message.text in data[idtg]["kvan"]:
                        global naz
                        naz = message.text
                    reply_markup=types.ReplyKeyboardRemove()
                    markup = types.InlineKeyboardMarkup(row_width = 1)
                    btn1 = types.InlineKeyboardButton(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìÖ',  callback_data="ras")
                    btn2 = types.InlineKeyboardButton(text='–£—á–µ–Ω–∏–∫–∏üôç‚Äç‚ôÇÔ∏è',  callback_data="uch")
                    btn3 = types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞–Ω—Ç—É–º–∞üí¨',  callback_data="opis")
                    btn4 = types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞üì§',  callback_data="rassilka")
                    btn5 = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥üëàüèª',  callback_data="kvant")
                    markup.add(btn1, btn2, btn3, btn4, btn5)
                    bot.send_message(message.chat.id, config.kvant(naz, idtg),  reply_markup=markup, parse_mode='HTML')
                if message.text == "–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å‚ûï":
                    d = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width = 1)
                    for i in d:
                        try:
                            btn1 = types.KeyboardButton(i)
                            markup.add(btn1)
                        except:
                            pass
                    btn2 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞!')
                    markup.add(btn2)
                    bot.send_message(message.chat.id, config.dop_day,  reply_markup=markup, parse_mode='HTML')
                    bot.register_next_step_handler(message, day)


                    
            def day(message):
                with open('uchitel.json', 'r') as file:
                    data = json.load(file)
                idtg = str(message.from_user.id)
                with open('kvantorium.json', 'r') as file:
                    kvant = json.load(file)
                if message.text == '–û—Ç–º–µ–Ω–∞!':
                    reply_markup=types.ReplyKeyboardRemove()
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width = 1)
                    try:
                        for i in kvant[naz]["ras"]:
                            try:
                                btn1 = types.KeyboardButton(i)
                                markup.add(btn1)
                            except:
                                pass
                    except:
                        pass
                    btn4 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å‚ûï')
                    markup.add(btn4)
                    btn5 = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—èüëàüèª')
                    markup.add(btn5)
                    bot.send_message(idtg, config.ras,  parse_mode='HTML', reply_markup=markup)
                elif message.text in ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]:
                    with open('kvantorium.json', 'r') as file:
                        kvant = json.load(file)
                    kvant[naz]["ras"][message.text] = {"ras_str" : "", "ras_bd": []}
                    with open('kvant.json', 'w') as file:
                        json.dump(kvant, file, indent=4)
                    markup = types.InlineKeyboardMarkup(row_width = 1)
                    btn1 = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥üëàüèª", callback_data="ras")
                    markup.add(btn1)
                    bot.send_message(message.chat.id, f'''
<i>–î–µ–Ω—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</i>
                    ''',  reply_markup=markup, parse_mode='HTML')
                else:
                    d = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width = 1)
                    for i in d:
                        try:
                            btn1 = types.KeyboardButton(i)
                            markup.add(btn1)
                        except:
                            pass
                    btn2 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞!')
                    markup.add(btn2)
                    bot.send_message(message.chat.id, config.dop_day,  reply_markup=markup, parse_mode='HTML')
                    bot.register_next_step_handler(message, day)


            def dop(message):
                with open('uchitel.json', 'r') as file:
                    data = json.load(file)
                idtg = str(message.from_user.id)
                with open('kvantorium.json', 'r') as file:
                    kvant = json.load(file)
                if message.text == "–ù–∞–∑–∞–¥üëàüèª" or message.text == "–°–æ–∑–¥–∞—Ç—å –∫–≤–∞–Ω—Ç—É–º":
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width = 1)
                    for i in data[idtg]["kvan"]:
                        try:
                            btn1 = types.KeyboardButton(i)
                            markup.add(btn1)
                        except:
                            pass
                    btn4 = types.KeyboardButton('–°–æ–∑–¥–∞—Ç—å –∫–≤–∞–Ω—Ç—É–º')
                    markup.add(btn4)
                    btn5 = types.KeyboardButton('–í –º–µ–Ω—éüìÖ')
                    markup.add(btn5)
                    bot.send_message(message.chat.id, config.uchitel_kvant, parse_mode='HTML', reply_markup=markup)
                else:
                    with open('uchitel.json', 'r') as file:
                        data = json.load(file)
                    with open('kvantorium.json', 'r') as file:
                        kvant = json.load(file)
                    rbr = {"ras" : {}, "ludi" : {}, "dop" : {"bio": {"text": "–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!", "kv": "‚ùå", "opis": "‚ùå"}}}
                    kvant[message.text] = rbr
                    data[idtg]["kvan"].append(message.text)
                    with open('kvantorium.json', 'w') as file:
                        json.dump(kvant, file, indent=4)
                    with open('uchitel.json', 'w') as file:
                        json.dump(data, file, indent=4)
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width = 1)
                    btn1 = types.KeyboardButton('–ö –∫–≤–∞–Ω—Ç—É–º–∞–ºüë©‚Äçüè´')
                    markup.add(btn1)
                    bot.send_message(message.chat.id, f'''
                    <i>–ö–≤–∞–Ω—Ç—É–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω</i>
                    ''',  reply_markup=markup, parse_mode='HTML')
                    
            @bot.callback_query_handler(func=lambda call: True)
            def call_menu(call):
                with open('uchitel.json', 'r') as file:
                    data = json.load(file)
                idtg = str(call.from_user.id)
                with open('kvantorium.json', 'r') as file:
                    kvant = json.load(file)
                if call.data == "menu":
                    reply_markup=types.ReplyKeyboardRemove()
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width = 1)
                    btn1 = types.KeyboardButton(text="–ö–≤–∞–Ω—Ç—É–º—ãüë©‚Äçüè´")
                    markup.add(btn1)
                    bot.send_message(call.from_user.id, config.menu_uchitel(idtg), parse_mode='HTML', reply_markup=markup)
                if call.data == "ras":
                    reply_markup=types.ReplyKeyboardRemove()
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width = 1)
                    try:
                        for i in kvant[naz]["ras"]:
                            try:
                                btn1 = types.KeyboardButton(i)
                                markup.add(btn1)
                            except:
                                pass
                    except:
                        pass
                    btn4 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å‚ûï')
                    markup.add(btn4)
                    btn5 = types.KeyboardButton('–ö –∫–≤–∞–Ω—Ç—É–º–∞–ºüë©‚Äçüè´')
                    markup.add(btn5)
                    bot.send_message(call.from_user.id, config.ras,  parse_mode='HTML', reply_markup=markup)

            bot.polling(none_stop=True, timeout=20000)
        else:
            pass
main()